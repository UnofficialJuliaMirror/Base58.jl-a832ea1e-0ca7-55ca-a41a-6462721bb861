
using Base58
using Base.Test

@testset "Base58" begin

    const test_data = hcat(
        [b"",                b""],
        [[0x00],             b"1"],
        [[0x00, 0x00],       b"11"],
        [b"hello world",     b"StV1DL6CwTryKyV"],
        [b"\0\0hello world", b"11StV1DL6CwTryKyV"],
        [nothing,            b"3vQOB7B6uFg4oH"],
        [b""" !"#\$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~""",
                             b"3WSNuyEGf19K7EdeCmokbtTAXJwJUdvg8QXxAacYC7kR1bQoYeWVr5iMUHvxvv4FCFY48dVUrX6BrFLod6zsEhHU9NciUXFM17h1qtveYD7ocbnXQyuY84An9nAvEjdt6H"]
    )

    # The weird eval magic gives the value of i if the test fails
    for i in 1:size(test_data, 2)
        if(test_data[1, i] != nothing)
            @eval @test Base58.base58encode($(test_data)[1, $i]) == $(test_data)[2, $i]
        end
    end

    for i in 1:size(test_data, 2)
        if(test_data[1, i] == nothing)
            @eval @test_throws ArgumentError Base58.base58decode($(test_data)[2, $i])
        else
            @eval @test Base58.base58decode($(test_data)[2, $i]) == $(test_data)[1, $i]
        end
    end
end

@testset "base58check" begin

    const test_data = hcat(
        [b"17VZNX1SN5NtKa8UQFxwQbFeFc3iqRYhem",
         [0x00, 0x47, 0x37, 0x6C, 0x6F, 0x53, 0x7D, 0x62, 0x17, 0x7A, 0x2C, 0x41, 0xC4,
          0xCA, 0x9B, 0x45, 0x82, 0x9A, 0xB9, 0x90, 0x83, 0xBC, 0x94, 0x30, 0xC6]],
        [b"3EktnHQD7RiAE6uzMj2ZifT9YgRrkSgzQX",
         [0x05, 0x8F, 0x55, 0x56, 0x3B, 0x9A, 0x19, 0xF3, 0x21, 0xC2, 0x11, 0xE9, 0xB9,
          0xF3, 0x8C, 0xDF, 0x68, 0x6E, 0xA0, 0x78, 0x45, 0x5D, 0xC3, 0x42, 0x20]],
        [b"058F55563B9A19F321C211E9B9F38CDF686EA078455DC34220",
         [0x6F, 0x24, 0x3F, 0x13, 0x94, 0xF4, 0x45, 0x54, 0xF4, 0xCE, 0x3F, 0xD6, 0x86,
          0x49, 0xC1, 0x9A, 0xDC, 0x48, 0x3C, 0xE9, 0x24, 0xBB, 0xDE, 0x21, 0x51]],
        [b"2MzQwSSnBHWHqSAqtTVQ6v47XtaisrJa1Vc",
         [0xC4, 0x4E, 0x9F, 0x39, 0xCA, 0x46, 0x88, 0xFF, 0x10, 0x21, 0x28, 0xEA, 0x4C,
          0xCD, 0xA3, 0x41, 0x05, 0x32, 0x43, 0x05, 0xB0, 0x7F, 0x39, 0x15, 0x53]],
        [b"5Hwgr3u458GLafKBgxtssHSPqJnYoGrSzgQsPwLFhLNYskDPyyA",
         [0x80, 0x10, 0xCE, 0x1E, 0x4B, 0xD6, 0xF7, 0x5B, 0xBC, 0xB7, 0xC1, 0x4B, 0x31,
          0x08, 0xA6, 0x66, 0x08, 0xB9, 0x18, 0x2C, 0x0F, 0x76, 0x82, 0x6C, 0x5F, 0xB5,
          0x84, 0xB8, 0xF6, 0xEF, 0xA7, 0x65, 0x25, 0x69, 0x06, 0x2B, 0xA9]],
        [b"L1aW4aubDFB7yfras2S1mN3bqg9nwySY8nkoLmJebSLD5BWv3ENZ",
         [0x80, 0x82, 0x0B, 0x96, 0x77, 0x76, 0xCA, 0xB7, 0x11, 0xE0, 0xE0, 0x5A, 0x8D,
          0x04, 0x38, 0x5E, 0x71, 0xD4, 0x33, 0x3B, 0x2B, 0xE7, 0x3F, 0x39, 0xED, 0xFD,
          0x73, 0xD2, 0xD3, 0xEA, 0x9E, 0x13, 0x12, 0x01, 0xC4, 0xBA, 0x11, 0xF6]],
        [b"xpub661MyMwAqRbcEYS8w7XLSVeEsBXy79zSzH1J8vCdxAZningWLdN3zgtU6LBpB85b3D2yc8sfvZU521AAwdZafEz7mnzBBsz4wKY5e4cp9LB",
         [0x04, 0x88, 0xB2, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x12, 0xCA, 0x49, 0x20]],
        [b"xprv9s21ZrQH143K24Mfq5zL5MhWK9hUhhGbd45hLXo2Pq2oqzMMo63oStZzF93Y5wvzdUayhgkkFoicQZcP3y52uPPxFnfoLZB21Teqt1VvEHx",
         [0x04, 0x88, 0xAD, 0xE4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x1C, 0xB0, 0x2E, 0x73]],
        [b"92Pg46rUhgTT7romnV7iGW6W1gbGdeezqdbJCzShkCsYNzyyNcc",
         [0xEF, 0x6A, 0x2A, 0xBA, 0x3C, 0x17, 0x1E, 0x5E, 0x95, 0x84, 0x6F, 0x94, 0xAC,
          0x9D, 0xD4, 0xDC, 0xD6, 0x10, 0x15, 0x07, 0xEC, 0x1D, 0xFF, 0x3A, 0xE9, 0xB4,
          0x76, 0x6A, 0xB4, 0x14, 0xA6, 0xD5, 0x66, 0xA9, 0xC0, 0x55, 0xA5]],
        [b"cNJFgo1driFnPcBdBX8BrJrpxchBWXwXCvNH5SoSkdcF6JXXwHMm",
         [0xEF, 0x15, 0x60, 0x49, 0x6D, 0x13, 0x57, 0x30, 0xF5, 0xA1, 0xBB, 0x39, 0x58,
          0x0A, 0xBB, 0xA1, 0xFE, 0x8E, 0xA2, 0x70, 0x76, 0x8A, 0x08, 0xC4, 0x9A, 0x66,
          0x73, 0x27, 0x72, 0xB0, 0xB8, 0x11, 0xE2, 0x01, 0x7A, 0xE9, 0xDE, 0xC4]],
        [b"tpubD6NzVbkrYhZ4WLczPJWReQycCJdd6YVWXubbVUFnJ5KgU5MDQrD998ZJLNGbhd2pq7ZtDiPYTfJ7iBenLVQpYgSQqPjUsQeJXH8VQ8xA67D",
         [0x04, 0x35, 0x87, 0xCF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x95, 0x88, 0x61, 0x14]],
        [b"tprv8ZgxMBicQKsPcsbCVeqqF1KVdH7gwDJbxbzpCxDUsoXHdb6SnTPYxdwSAKDC6KKJzv7khnNWRAJQsRA8BBQyiSfYnRt6zuu4vZQGKjeW4YF",
         [0x04, 0x35, 0x83, 0x94, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x5F, 0x74, 0xA5, 0x98]],
        [b"tprv8ZgxMBicQKsPcsbCVeqqF1KKdH7gwDJbxbzpCxDUsoXHdb6SnTPYxdwSAKDC6KKJzv7khnNWRAJQsRA8BBQyiSfYnRt6zuu4vZQGKjeW4YF",
         nothing]
    )

    for i in 1:size(test_data, 2)
        if test_data[i, 2] == nothing
            @eval @test_throws ArgumentError Base58.base58checkdecode($(test_data)[1, $i])
        else
            @eval @test Base58.base58checkdecode($(test_data)[1, $i]) == $(test_data)[2, $i]
        end
    end

    for i in 1:size(test_data, 2)
        if test_data[1, i] != nothing
            @eval @test Base58.base58checkencode($(test_data)[2, $i]) == $(test_data)[1, $i]
        end
    end

tmp1 = test_data[1, 1]
tmp2 = test_data[1, 2]

Base58.base58checkencode(tmp, Base58.XPUB)
Base58.base58checkencode(tmp)

tmp1 |> String
tmp2 |> String

using SHA

# WORKS
Base58.base58encode([
    [0x00, 0x01, 0x09, 0x66, 0x77, 0x60, 0x06, 0x95, 0x3D, 0x55, 0x67, 0x43,
     0x9E, 0x5E, 0x39, 0xF8, 0x6A, 0x0D, 0x27, 0x3B, 0xEE]...,
    sha256(sha256(
        [0x00, 0x01, 0x09, 0x66, 0x77, 0x60, 0x06, 0x95, 0x3D, 0x55, 0x67, 0x43,
         0x9E, 0x5E, 0x39, 0xF8, 0x6A, 0x0D, 0x27, 0x3B, 0xEE]
    ))[1:4]...
]) |> String

Base58.base58checkencode([0x01, 0x09, 0x66, 0x77, 0x60, 0x06, 0x95, 0x3D, 0x55, 0x67, 0x43,
                          0x9E, 0x5E, 0x39, 0xF8, 0x6A, 0x0D, 0x27, 0x3B, 0xEE], [0x00])

Base58.base58checkdecode(tmp2, true)
Base58.base58checkdecode(tmp2, false)

Base58.base58encode(tmp1) |> String

test_data[1, 2]

convert(Array{UInt8}, big"0xff01")


end
